{"version":3,"sources":["?","../app/js/ellipsis.js"],"names":["window","angular","module","constant","directive","$document","$timeout","ellipsis","$window","restrict","link","$scope","$element","timer","orginalText","clipText","cancel","text","elementHeight","offsetHeight","elementWidth","offsetWidth","testEl","cloneNode","style","height","width","opacity","position","left","innerHTML","body","appendChild","removeChild","split","splice","length","join","onInit","innerText","onDestroy","element","off","on","$on"],"mappings":";;CAAA,SAAUA,GCAV,YAoBAC,SAAQC,OAAO,kBAOdC,SAAS,WAAY,WAMrBC,UAAU,cACT,YACA,WACA,WACA,UACA,SAAUC,EAAWC,EAAUC,EAAUC,GACvC,OACEC,SAAU,IACVC,KAAM,SAAUC,EAAQC,GAMtB,GAAIC,GAAQ,KAKRC,EAAc,KAKdC,EAAW,WACTF,GACFP,EAASU,OAAOH,GAElBA,EAAQP,EAAS,WACf,GAAIW,GAAOH,EACPI,EAAgBN,EAAS,GAAGO,aAC5BC,EAAeR,EAAS,GAAGS,YAC3BC,EAASV,EAAS,GAAGW,WAAU,EAEnC,IAAsB,IAAlBL,EAAJ,CAeA,GAXAI,EAAOE,MAAMC,OAAS,OACtBH,EAAOE,MAAME,MAAQN,EAAe,KAGpCE,EAAOE,MAAMG,QAAU,EACvBL,EAAOE,MAAMI,SAAW,WACxBN,EAAOE,MAAMK,KAAO,SACpBP,EAAOQ,UAAYb,EAEnBZ,EAAU,GAAG0B,KAAKC,YAAYV,GAE1BA,EAAOH,cAAgBD,EAEzB,WADAb,GAAU,GAAG0B,KAAKE,YAAYX,EAIhC,MAAOA,EAAOH,aAAeD,GAC3BD,EAAOA,EAAKiB,MAAM,KAClBjB,EAAOA,EAAKkB,OAAO,EAAIlB,EAAKmB,OAAO,GAAIC,KAAK,KAC5Cf,EAAOQ,UAAYb,EAAOV,CAG5BK,GAAS,GAAGkB,UAAYb,EAAOV,EAC/BF,EAAU,GAAG0B,KAAKE,YAAYX,KAC7B,MAQDgB,EAAS,WACXxB,EAAcF,EAAS,GAAG2B,UAC1BxB,KAMEyB,EAAY,WACdvC,QAAQwC,QAAQjC,GAASkC,IAAI,UAG/BzC,SAAQwC,QAAQjC,GAASmC,GAAG,SAAU5B,GACtCJ,EAAOiC,IAAI,WAAYJ,GAEvBF,UDtHuBtC","file":"angular-ellipsis.min.js","sourcesContent":[null,"'use strict';\n/**\n * Remove excess text and add ellipsis symbol\n * to end of text before text overflows container\n * @example\n    // 1. add angular-ellipsis file to your index.html file\n    <script src=\"path/to/angular-ellipsis.min.js.\"></script>\n\n\n    // 2. add module to your existing angular app\n    var myApp = angular.module('myApp', ['sn.ellipsis']);\n\n    // 3. add the sn-ellipsis directive to the element you wish to clip excess text from\n    <p sn-ellipsis style=\"width: 300px; height: 200px;\">\n      Text to be clipped\n    </p>\n * @module   sn.ellipsis\n * @main     sn.ellipsis\n * @author   SOON_\n */\nangular.module('sn.ellipsis', [\n\n])\n/**\n * @constant\n * @property {String} ellipsis : HTML code for ellipsis symbol\n */\n.constant('ellipsis', '&#8230;')\n/**\n * @example\n *  <p sn-ellipsis>Lorem Ipsum<p>\n * @class snEllipsis\n */\n.directive('snEllipsis', [\n  '$document',\n  '$timeout',\n  'ellipsis',\n  '$window',\n  function ($document, $timeout, ellipsis, $window){\n    return {\n      restrict: 'A',\n      link: function ($scope, $element){\n        /**\n         * Store $timeout in variable so we can\n         * easily find it and cancel it.\n         * @type {Object}\n         */\n        var timer = null;\n        /**\n         * @property originalText\n         * @type     {String}\n         */\n        var orginalText = null;\n        /**\n         * Clip text to fit in element\n         * @method clipText\n         */\n        var clipText = function clipText() {\n          if (timer){\n            $timeout.cancel(timer);\n          }\n          timer = $timeout(function () {\n            var text = orginalText,\n                elementHeight = $element[0].offsetHeight,\n                elementWidth = $element[0].offsetWidth,\n                testEl = $element[0].cloneNode(true);\n\n            if (elementHeight === 0){\n              return;\n            }\n\n            testEl.style.height = 'auto';\n            testEl.style.width = elementWidth + 'px';\n\n            // hide test element\n            testEl.style.opacity = 0;\n            testEl.style.position = 'absolute';\n            testEl.style.left = '-999em';\n            testEl.innerHTML = text;\n\n            $document[0].body.appendChild(testEl);\n\n            if (testEl.offsetHeight <= elementHeight) {\n              $document[0].body.removeChild(testEl);\n              return;\n            }\n\n            while (testEl.offsetHeight > elementHeight) {\n              text = text.split(' ');\n              text = text.splice(0, (text.length-1)).join(' ');\n              testEl.innerHTML = text + ellipsis;\n            }\n\n            $element[0].innerHTML = text + ellipsis;\n            $document[0].body.removeChild(testEl);\n          }, 100);\n\n        };\n        /**\n         * Store orginalText in variable then call\n         * logic to clip text and add ellipsis if required\n         * @method onInit\n         */\n        var onInit = function onInit() {\n          orginalText = $element[0].innerText;\n          clipText();\n        };\n        /**\n         * Remove event handler from resize event\n         * @method onDestroy\n         */\n        var onDestroy = function onDestroy(){\n          angular.element($window).off('resize');\n        };\n\n        angular.element($window).on('resize', clipText);\n        $scope.$on('$destroy', onDestroy);\n\n        onInit();\n\n      }\n    };\n  }\n]);\n"]}